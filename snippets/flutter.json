{
  "Stateless Widget ayoub": {
    "prefix": "statelessW",
    "body": [
      "class ${1:name} extends StatelessWidget {",
      "  const $1({Key? key}) : super(key: key);\n",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ${2:Container}();", 
      "  }",
      "}"
    ],
    "description": [
      "Ayoub Create a Stateless widget"
    ]
  },
  "Stateful Widget": {
    "prefix": "statefulW",
    "body": [
      "class ${1:WidgetName} extends StatefulWidget {",
      "  $1({Key? key}) : super(key: key);\n",
      "  @override",
      "  _$1State createState() => _$1State();",
      "}\n",
      "class _$1State extends State<$1> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "       body: Column(",
      "          children: <Widget>[",
      "            ${2:Text('home screen')},",
      "          ],",
      "       ),",
      "    );",
      "  }",
      "}"
    ],
    "description": [
      "Create a Stateful widget with Scaffold(Text)"
    ]
  },
  "Build Method": {
    "prefix": "build",
    "body": [
      "@override",
      "Widget build(BuildContext context) {",
      "  return ${0:};",
      "}"
    ],
    "description": [
      "Describes the part of the user interface represented by this widget."
    ]
  },
  "Custom Painter ": {
    "prefix": "customPainter",
    "body": [
      "class ${0:name}Painter extends CustomPainter {",
      "",
      "  @override",
      "  void paint(Canvas canvas, Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldRepaint(${0:name}Painter oldDelegate) => false;",
      "",
      "  @override",
      "  bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
      "}"
    ],
    "description": [
      "Used for creating custom paint"
    ]
  },
  "Custom Clipper ": {
    "prefix": "customClipper",
    "body": [
      "class ${0:name}Clipper extends CustomClipper<Path> {",
      "",
      "  @override",
      "  Path getClip(Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldReclip(CustomClipper<Path> oldClipper) => false;",
      "}"
    ],
    "description": [
      "Used for creating custom shapes"
    ]
  },
  "InitState ": {
    "prefix": "initS",
    "body": [
      "@override",
      "void initState() { ",
      "  super.initState();",
      "  ${0:}",
      "}"
    ],
    "description": [
      "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates."
    ]
  },
  "Dispose": {
    "prefix": "dis",
    "body": [
      "@override",
      "void dispose() { ",
      "  ${0:}",
      "  super.dispose();",
      "}"
    ],
    "description": [
      "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
    ]
  },
  "Reassemble": {
    "prefix": "reassemble",
    "body": [
      "@override",
      "void reassemble(){",
      "  super.reassemble();",
      "  ${0:}",
      "}"
    ],
    "description": [
      "Called whenever the application is reassembled during debugging, for example during hot reload."
    ]
  },
  "didChangeDependencies": {
    "prefix": "didChangeD",
    "body": [
      "@override",
      "void didChangeDependencies() {",
      "  super.didChangeDependencies();",
      "  ${0:}",
      "}"
    ],
    "description": [
      "Called when a dependency of this State object changes"
    ]
  },
  "didUpdateWidget": {
    "prefix": "didUpdateW",
    "body": [
      "@override",
      "void didUpdateWidget (${1:Type} ${2:oldWidget}) {",
      "  super.didUpdateWidget(${2:oldWidget});",
      "  ${0:}",
      "}"
    ],
    "description": [
      "Called whenever the widget configuration changes."
    ]
  },
  "ListView.Builder": {
    "prefix": "listViewB",
    "body": [
      "ListView.builder(",
      "  itemCount: ${1:1},",
      "  itemBuilder: (BuildContext context, int index) {",
      "  return ${2:};",
      " },",
      "),"
    ],
    "description": [
      "Creates a scrollable, linear array of widgets that are created on demand.Providing a non-null `itemCount` improves the ability of the [ListView] to estimate the maximum scroll extent."
    ]
  },
  "ListView.Separated": {
    "prefix": "listViewS",
    "body": [
      "ListView.separated(",
      "  itemCount: ${1:1},",
      "  separatorBuilder: (BuildContext context, int index) {",
      "  return ${2:};",
      " },",
      "  itemBuilder: (BuildContext context, int index) {",
      "  return ${3:};",
      " },",
      "),"
    ],
    "description": [
      "Creates a fixed-length scrollable linear array of list 'items' separated by list item 'separators'."
    ]
  },
  "GridView.Builder": {
    "prefix": "gridViewB",
    "body": [
      "GridView.builder(",
      "  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
      "    crossAxisCount: ${1:2},",
      "  ),",
      "  itemCount: ${2:2},",
      "  itemBuilder: (BuildContext context, int index) {",
      "    return ${3:};",
      "  },",
      "),"
    ],
    "description": [
      "Creates a scrollable, 2D array of widgets that are created on demand. Providing a non-null `itemCount` improves the ability of the [GridView] to estimate the maximum scroll extent."
    ]
  },
  "GridView.Count": {
    "prefix": "gridViewC",
    "body": [
      "GridView.count(",
      "  crossAxisSpacing: ${1:1},",
      "  mainAxisSpacing: ${2:2},",
      "  crossAxisCount: ${3:2},",
      "  children: <Widget> [",
      "    ${4:}",
      "  ],",
      "),"
    ],
    "description": [
       "Creates a scrollable, 2D array of widgets with a fixed number of tiles in the cross axis."
    ]
  },
  "GridView.Extent": {
    "prefix": "gridViewE",
    "body": [
      "GridView.extent(",
      "  maxCrossAxisExtent:  ${1:2},",
      "  children: <Widget> [",
      "    ${2:}",
      "  ],",
      "),"
    ],
    "description": [
       "Creates a scrollable, 2D array of widgets with tiles that each have a maximum cross-axis extent."
    ]
  },
  "Custom Scroll View": {
    "prefix": "customScrollV",
    "body": [
      "CustomScrollView(",
      "  slivers: <Widget>[",
      "  ${0:}",
      "  ],",
      "),"
    ],
    "description": [
       "Creates a `ScrollView` that creates custom scroll effects using slivers. If the `primary` argument is true, the `controller` must be null."
    ]
  },
  "Stream Builder": {
    "prefix": "streamBldr",
    "body": [
      "StreamBuilder(",
      "  stream: ${1:stream},",
      "  initialData: ${2:initialData},",
      "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "    return Container(",
      "      child: ${3:child},",
      "    );",
      "  },",
      "),"
    ],
    "description": [
       "Creates a new `StreamBuilder` that builds itself based on the latest snapshot of interaction with the specified `stream`"
    ]
  },
  "Animated Builder": {
    "prefix": "animatedBldr",
    "body": [
      "AnimatedBuilder(",
      "  animation: ${1:animation},",
      "  child: ${2:child},",
      "  builder: (BuildContext context, Widget child) {",
      "    return ${3:};",
      "  },",
      "),"
    ],
    "description": [
       "Creates an Animated Builder. The widget specified to `child` is passed to the `builder` "
    ]
  },
  "Stateful Builder": {
    "prefix": "statefulBldr",
    "body": [
      "StatefulBuilder(",
      "  builder: (BuildContext context, setState) {",
      "    return ${0:};",
      "  },",
      "),"
    ],
    "description": [
       "Creates a widget that both has state and delegates its build to a callback. Useful for rebuilding specific sections of the widget tree."
    ]
  },
  "Orientation Builder": {
    "prefix": "orientationBldr",
    "body": [
      "OrientationBuilder(",
      "  builder: (BuildContext context, Orientation orientation) {",
      "    return Container(",
      "      child: ${3:child},",
      "    );",
      "  },",
      "),"
    ],
    "description": [
       "Creates a builder which allows for the orientation of the device to be specified and referenced"
    ]
  },
  "Layout Builder": {
    "prefix": "layoutBldr",
    "body": [
      "LayoutBuilder(",
      "  builder: (BuildContext context, BoxConstraints constraints) {",
      "    return ${0:};",
      "  },",
      "),"
    ],
    "description": [
       "Similar to the Builder widget except that the framework calls the builder function at layout time and provides the parent widget's constraints."
    ]
  },
  "Single Child ScrollView": {
    "prefix": "singleChildSV",
    "body": [
      "SingleChildScrollView(",
      "  controller: ${1:controller,}",
      "  child: Column(",
      "    ${0:}",
      "  ),",
      "),"
    ],
    "description": [
       "Creates a scroll view with a single child"
    ]
  },
  "Future Builder": {
    "prefix": "futureBldr",
    "body": [
      "FutureBuilder(",
      "  future: ${1:Future},",
      "  initialData: ${2:InitialData},",
      "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "    return ${3:};",
      "  },",
      "),"
    ],
    "description": [
       "Creates a Future Builder. This builds itself based on the latest snapshot of interaction with a Future."
    ]
  },
  "No Such Method": {
    "prefix": "nosm",
    "body": [
      "@override",
      "dynamic noSuchMethod(Invocation invocation) {",
      "  ${1:}",
      "}"
    ],
    "description": [
       "This method is invoked when a non-existent method or property is accessed."
    ]
  },
  "Inherited Widget": {
    "prefix": "inheritedW",
    "body": [
      "class ${1:Name} extends InheritedWidget {",
      "  ${1:Name}({Key? key, required this.child}) : super(key: key, child: child);",
      "",
      "  final Widget child;",
      "",
      "  static ${1:Name}? of(BuildContext context) {",
      "    return context.dependOnInheritedWidgetOfExactType<${1:Name}>();",
      "  }",
      "",
      "  @override",
      "  bool updateShouldNotify(${1:Name} oldWidget) {",
      "    return ${2:true};",
      "  }",
      "}"
    ],
    "description": [
       "Class used to propagate information down the widget tree"
    ]
  },
  "Mounted": {
    "prefix": "mounted",
    "body": [
      "@override",
      "bool get mounted {",
      "  ${0:}",
      "}"
    ],
    "description": [
       "Whether this State object is currently in a tree."
    ]
  },
  "Sink": {
    "prefix": "snk",
    "body": [
      "Sink<${1:type}> get ${2:name} => _${2:name}Controller.sink;",
      "final _${2:name}Controller = StreamController<${1:type}>();"
    ],
    "description": [
       "A Sink is the input of a stream."
    ]
  },
  "Stream": {
    "prefix": "strm",
    "body": [
      "Stream<${1:type}> get ${2:name} => _${2:name}Controller.stream;",
      "final _${2:name}Controller = StreamController<${1:type}>();"
    ],
    "description": [
       "A source of asynchronous data events. A stream can be of any data type <T>"
    ]
  },
  "Subject": {
    "prefix": "subj",
    "body": [
      "Stream<${1:type}> get ${2:name} => _${2:name}Subject.stream;",
      "final _${2:name}Subject = BehaviorSubject<${1:type}>();"
    ],
    "description": [
       "A BehaviorSubject is also a broadcast StreamController which returns an Observable rather than a Stream."
    ]
  },
  "toString": {
    "prefix": "toStr",
    "body": [
      "@override",
      "String toString() {",
      "return ${1:toString};",
      " }"
    ],
    "description": [
       "Returns a string representation of this object."
    ]
  },
  "debugPrint": {
    "prefix": "debugP",
    "body": [
      "debugPrint(${1:statement});"
    ],
    "description": [
       "Prints a message to the console, which you can access using the flutter tool's `logs` command (flutter logs)."
    ]
  },
  "Material Package": {
    "prefix": "impM",
    "body": "import 'package:flutter/material.dart';\n$1",
    "description": [
      "import 'package:flutter/material.dart';\n\n"
    ]
  },
  "Cupertino Package": {
    "prefix": "impC",
    "body": "import 'package:flutter/cupertino.dart'\n$1;",
    "description": [
       "import 'package:flutter/cupertino.dart'"
    ]
  },
  "flutter_test Package": {
    "prefix": "importFT",
    "body": "import 'package:flutter_test/flutter_test.dart';",
    "description": [
       "import 'package:flutter_test/flutter_test.dart"
    ]
  },
  "Material App": {
    "prefix": "mateapp",
    "body": [
        "import 'package:flutter/material.dart';",
        " ",
        "void main() => runApp(",
        "  MaterialApp(",
        "    home:MyApp(),",
        "  ),",
        ");",
        " ",
        "class MyApp extends StatelessWidget {",
        "  @override",
        "  Widget build(BuildContext context) {",
        "    return Scaffold(",
        "        appBar: AppBar(",
        "          title: Text('Material App Bar'),",
        "        ),",
        "        body: Column(",
        "          children: <Widget>[",
        "            Text('${1:Hello World}')",
        "            ],",
        "        ),",
        "    );",
        "  }",
        "}"
    ],
    "description": [
       "Create a MaterialApp"
    ]
  },
  "Cupertino App": {
    "prefix": "cupeapp",
    "body": [
      "import 'package:flutter/cupertino.dart';",
      " ",
      "void main() => runApp(MyApp());",
      " ",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return CupertinoApp(",
      "      title: 'Cupertino App',",
      "      home: CupertinoPageScaffold(",
      "        navigationBar: CupertinoNavigationBar(",
      "          middle: Text('Cupertino App Bar'),",
      "        ),",
      "        child: Center(",
      "          child: Container(",
      "            child: Text('Hello World'),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": [
       "Create a CupertinoApp"
    ]
  },
  "Tween Animation Builder": {
    "prefix": "tweenAnimationBuilder",
    "body": [
      "TweenAnimationBuilder(",
      "    duration: ${1:const Duration(),}",
      "    tween: ${2:Tween(),}",
      "    builder: (BuildContext context, ${3:dynamic} value, Widget? child) {",
      "       return ${4:Container();}",
      "     },",
      " ),  "
    ],
    "description": [
       "Widget builder that animates a property of a Widget to a target value whenever the target value changes."
    ]
  },
  "Value Listenable Builder": {
    "prefix": "valueListenableBuilder",
    "body": [
      "ValueListenableBuilder(",
      "    valueListenable: ${1: null},",
      "    builder: (BuildContext context, ${2:dynamic} value, Widget? child) {",
      "       return ${3: Container();}",
      "    },",
      " ),"
    ],
    "description": [
       "Given a ValueListenable<T> and a builder which builds widgets from concrete values of T, this class will automatically register itself as a listener of the ValueListenable and call the builder with updated values when the value changes."
    ]
  },
  "Test": {
    "prefix": "f-test",
    "body": [
      "test(",
      "   \"${1:test description}\",",
      "   () {},",
      ");"
    ],
    "description": [
       "Create a test function"
    ]
  },
  "Test Widgets": {
    "prefix": "widgetTest",
    "body": [
      "testWidgets(",
      "   \"${1:test description}\",",
      "   (WidgetTester tester) async {},",
      ");"
    ],
    "description": [
       "Create a testWidgets function"
    ]
  },
  "Scaffold widget snippet": {
    "prefix": "fscaf",
    "body": [
      "Scaffold(",
      "  appBar: AppBar(",
      "    title: Text('${1:Title}'),",
      "  ),",
      "  body: ${2:Container()}${0},",
      ");"
    ],
    "description": [
       "Scaffold widget snippet"
    ]
  },
  "Expand widget snippet": {
    "prefix": "fex",
    "body": [
      "Expanded(",
      "  child: ${1:Widget},${0}",
      ")"
    ],
    "description": [
       "Expand widget snippet"
    ]
  },
  "Text widget snippet": {
    "prefix": "ftxt",
    "body": [
      "Text('${1:text}'),${0}"
    ],
    "description": [
       "Text widget snippet"
    ]
  },
  "Flutter Icon widget snippet": {
    "prefix": "fic",
    "body": [
      "Icon(Icons.${1:clear})${0}"
    ],
    "description": [
       "Flutter Icon widget snippet"
    ]
  },
  "Flutter Container widget snippet": {
    "prefix": "fcont",
    "body": [
      "Container(",
      "  child: ${1}",
      ")"
    ],
    "description": [
       "Flutter Container widget snippet"
    ]
  },
  "Flutter Center widget snippet": {
    "prefix": "fcent",
    "body": [
      "Center(",
      "  child: ${1:Widget}(${0}),",
      ")"
    ],
    "description": [
       "Flutter Center widget snippet"
    ]
  },
  "Flutter Row widget snippet": {
    "prefix": "frow",
    "body": [
      "Row(",
      "  children: <Widget>[${0}],",
      ")"
    ],
    "description": [
       "Flutter Row widget snippet"
    ]
  },
  "Flutter Column widget snippet": {
    "prefix": "fcol",
    "body": [
      "Column(",
      "  children: <Widget>[${0}],",
      ")"
    ],
    "description": [
       "Flutter Column widget snippet"
    ]
  },
  "Flutter Stack widget snippet": {
    "prefix": "fstk",
    "body": [
      "Stack(",
      "  children: <Widget>[${0}],",
      ")"
    ],
    "description": [
       "Flutter Stack widget snippet"
    ]
  },
  "Align widget": {
    "prefix": "falign",
    "body": [
      "Align(",
      "  alignment: Alignment${1},",
      "  child:${2:Widget}",
      "  ),"
    ],
    "description": [
       "Align widget"
    ]
  },
  "Textbutton widget": {
    "prefix": "ftextbtn",
    "body": [
      "TextButton(",
      "  onPressed: () {${1}},",
      "  child: Text(",
      "    \"${2:Text Button}\",",
      "  ),",
      "),"
    ],
    "description": [
       "Textbutton widget"
    ]
  },
  "FloatingActionButton widget": {
    "prefix": "fab",
    "body": [
      "FloatingActionButton(",
      "  onPressed: () {${1}},",
      "  child: Icon(Icons.${2:add}),",
      "),"
    ],
    "description": [
       "FloatingActionButton widget"
    ]
  },
  "IconButton widget": {
    "prefix": "ficbtn",
    "body": [
      "IconButton(",
      "  onPressed: () {${1}},",
      "  icon: Icon(Icons.${2:add}),",
      "),"
    ],
    "description": [
       "IconButton widget"
    ]
  },
  "ElevatedButton widget": {
    "prefix": "felevbtn",
    "body": [
      "ElevatedButton(",
      "  onPressed: () {${1}},",
      "  child: Text(",
      "    \"${2:Elevated Button}\",",
      "  ),",
      ")"
    ],
    "description": [
       "ElevatedButton widget"
    ]
  },
  "GestureDetector widget": {
    "prefix": "fgesdet",
    "body": [
      "GestureDetector(",
      "  onTap: () {${1}},",
      "  child: ${2:Widget},",
      "),"
    ],
    "description": [
       "GestureDetector widget"
    ]
  },
  "InkWell widget": {
    "prefix": "fink",
    "body": [
      "InkWell(",
      "  onTap: () {${1}},",
      "  child:${2:Widget}",
      "),"
    ],
    "description": [
       "RaisedButton widget"
    ]
  },
  "Drawer widget": {
    "prefix": "fdrawer",
    "body": [
      "Drawer(",
      "  child: ListView(",
      "    children: const <Widget>[${0}],",
      "),  "
    ],
    "description": [
       "Drawer widget"
    ]
  },
  "MediaQuery widget": {
    "prefix": "fmeque",
    "body": [
      "MediaQuery.of(context).${0};"
    ],
    "description": [
       "MediaQuery widget"
    ]
  },
  "Services Package": {
    "prefix": "impS",
    "body": "import 'package:flutter/services.dart';\n$1",
    "description": [
       "import 'package:flutter/services.dart'"
    ]
  },
  "Foundation Package": {
    "prefix": "impF",
    "body": "import 'package:flutter/foundation.dart';\n$1",
    "description": [
       "import 'package:flutter/foundation.dart'"
    ]
  },
  "HTTP Package": {
    "prefix": "impH",
    "body": "import 'package:http/http.dart' as http;\n$1",
    "description": [
       "import 'package:http/http.dart' as http"
    ]
  },
  "Creates a screen with text in center": {
    "prefix": "screen",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:Screen} extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: Text('${1:App Bar}'),",
      "      ),",
      "      body: Center(",
      "        child: Container(",
      "          child: Text('${1:Hello World}'),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      ""
    ],
    "description": [
       "Creates a screen with text in center"
    ]
  },
  "Device Preview": {
    "prefix": "devprev",
    "body": [
      "import 'package:device_preview/device_preview.dart';",
      "import 'package:flutter/foundation.dart';",
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(",
      "      DevicePreview(",
      "        enabled: !kReleaseMode,",
      "        builder: (context) => MyApp(), // Wrap your app",
      "      ),",
      "    );",
      "",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "        debugShowCheckedModeBanner: false,",
      "        builder: DevicePreview.appBuilder,",
      "        title: 'Flutter Demo',",
      "        theme: ThemeData(",
      "          primarySwatch: Colors.blue,",
      "        ),",
      "        home: ${1:HomePage()},",
      "    );",
      "  }",
      "}"
    ],
    "description": [
       "Device Preview"
    ]
  },
  "Theme of context": {
    "prefix": "ftheme",
    "body": [
      "Theme.of(context).${0}"
    ],
    "description": [
       "Theme of context"
    ]
  },
  "CrossAxisAlignment": {
    "prefix": "caa",
    "body": [
      "crossAxisAlignment : CrossAxisAlignment.${0},"
    ],
    "description": [
       "CrossAxisAlignment"
    ]
  },
  "MainAxisAlignment": {
    "prefix": "maa",
    "body": [
      "mainAxisAlignment : MainAxisAlignment.${1},"
    ],
    "description": [
       "MainAxisAlignment"
    ]
  },
  "Flutter Logo": {
    "prefix": "flogo",
    "body": [
      "FlutterLogo(),"
    ],
    "description": [
       "Flutter Logo"
    ]
  },
  "SizedBox Widget": {
    "prefix": "fszb",
    "body": [
      "SizedBox(),"
    ],
    "description": [
       "Sized Box Widget"
    ]
  },
  "SizedBox Widget with width": {
    "prefix": "fszbw",
    "body": [
      "SizedBox(width:${0}),"
    ],
    "description": [
       "SizedBox Widget with width"
    ]
  },
  "SizedBox Widget with height": {
    "prefix": "fszbh",
    "body": [
      "SizedBox(height:${0}),"
    ],
    "description": [
       "SizedBox Widget with height"
    ]
  },
  "ListView Widget": {
    "prefix": "flistv",
    "body": [
      "ListView(",
      "children: <Widget>[${0}],",
      ")"
    ],
    "description": [
       "ListView Widget"
    ]
  },
  "Navigation widget": {
    "prefix": "fnav",
    "body": [
      "Navigator.push(",
      " context,",
      " MaterialPageRoute(builder: (context) => ${1}),",
      " );"
    ],
    "description": [
       "Flutter Navigation widget"
    ]
  },
  "Custom AppBar widget": {
    "prefix": "appbar",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:AppBarScreen} extends StatelessWidget with PreferredSizeWidget {",
      "  final Size preferredSize;",
      "",
      "  ${1:AppBarScreen}() : preferredSize = Size.fromHeight(56.0);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return AppBar(",
      "      title: Text(",
      "        '${2:AppBarScreen}',",
      "      ),",
      "      leading: IconButton(",
      "        icon: Icon(Icons.arrow_back_ios),",
      "        onPressed: () => Navigator.of(context).pop(),",
      "      ),",
      "      automaticallyImplyLeading: true,",
      "    );",
      "  }",
      "}"
    ],
    "description": [
       "Custom AppBar widget"
    ]
  },
  "Default Counter App ": {
    "prefix": "defaultApp",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "// ignore_for_file: prefer_const_constructors, prefer_const_literals_to_create_immutables, use_key_in_widget_constructors",
      "",
      "void main() => runApp(",
      "  MaterialApp(",
      "    home:MyApp(),",
      "  ),",
      ");",
      "",
      "class MyApp extends StatelessWidget {",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MyHomePage();",
      "  }",
      "}",
      "",
      "class MyHomePage extends StatefulWidget {",
      "",
      "  @override",
      "  _MyHomePageState createState() => _MyHomePageState();",
      "}",
      "",
      "class _MyHomePageState extends State<MyHomePage> {",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: Text('Bar text'),",
      "      ),",
      "      body: Center(",
      "        child: Column(",
      "          mainAxisAlignment: MainAxisAlignment.center,",
      "          children: <Widget>[",
      "            Text(",
      "              'helo word',",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": [
       "Default default app"
    ]
  },
  "Flutter TextStyle property": {
    "prefix": "fstyle",
    "body": [
      "style: TextStyle($0),"
    ],
    "description": [
       "Flutter TextStyle property"
    ]
  },
  "Dart main method": {
    "prefix": "main",
    "body": [
      "void main() {",
      "  $0",
      "}"
    ],
    "description": [
       "Dart main method"
    ]
  },
  "Anonymous identity method": {
    "prefix": "ident",
    "body": [
      "(${1:_}) => $1"
    ],
    "description": [
       "Anonymous identity method"
    ]
  },
  "Class outline": {
    "prefix": "class",
    "body": [
      "class $1 {",
      "  $0",
      "}"
    ],
    "description": [
       "Class outline"
    ]
  },
  "Dart import": {
    "prefix": "di",
    "body": [
      "import 'dart:${1:async}';"
    ],
    "description": [
       "Dart import"
    ]
  },
  "Import": {
    "prefix": "im",
    "body": [
      "import 'package:$1/${2:$1}.dart';"
    ],
    "description": [
       "Import"
    ]
  },
  "For-in loop": {
    "prefix": "for",
    "body": [
      "for(var $1 in ${2:$1s}) {",
      "  $0",
      "}"
    ],
    "description": [
       "For-in loop"
    ]
  },
  "indexed for loop": {
    "prefix": "fori",
    "body": [
      "for(int i = 0, ${3:l} = $2.length; i<$3; i++) {",
      "  var $1 = ${2:$1s}[i];",
      "  $0",
      "}"
    ],
    "description": [
       "indexed for loop"
    ]
  },
  "Try/catch block": {
    "prefix": "try",
    "body": [
      "try {",
      "  ${1:${VISUAL}}",
      "} catch(${2:e}${3:, st}) {",
      "  $4",
      "}"
    ],
    "description": [
       "Try/catch block"
    ]
  },
  "if condution": {
    "prefix": "if",
    "body": [
      "if ($1) {",
      "  ${2://TODO:: }",
      "}\n"
    ],
    "description": [
      "if (...) {",
      "  ...",
      "}"
    ]
  },
  "If else": {
    "prefix": "ifelse",
    "body": [
      "if ($1) {",
      "  ${2://TODO:: }",
      "}",
      "else{",
      "  ${3://TODO:: }",
      "}\n"
    ],
    "description": [
      "if (...) {",
      "  ...",
      "}",
      "else{",
      "  ...",
      "}\n"
    ]
  },
  "Field setter": {
    "prefix": "set",
    "body": [
      "set $1($2 $1) {",
      "  ${3:_$1 = $1;}",
      "}"
    ],
    "description": [
       "Field setter"
    ]
  },
  "Simple field getter": {
    "prefix": "get",
    "body": [
      "$1 get $2 => ${3:_$2};"
    ],
    "description": [
       "Simple field getter"
    ]
  },
  "Field getter with more logic": {
    "prefix": "gett",
    "body": [
      "$1 get $2 {",
      "  $3",
      "}"
    ],
    "description": [
       "Field getter with more logic"
    ]
  },
  "Async field getter": {
    "prefix": "aget",
    "body": [
      "Future<$1> get $2 async => ${3:_$2};"
    ],
    "description": [
       "Async field getter"
    ]
  },
  "Async field getter with more logic": {
    "prefix": "agett",
    "body": [
      "Future<$1> get $2 async {",
      "  $3",
      "}"
    ],
    "description": [
       "Async field getter with more logic"
    ]
  },
  "Stream field with a controller": {
    "prefix": "gets",
    "body": [
      "Stream<${2:void}> get ${1} => ${3:$4.stream;",
      "final ${4:_$1} = StreamController<$2>();}"
    ],
    "description": [
       "Stream field with a controller"
    ]
  },
  "Anonymous method": {
    "prefix": "m",
    "body": [
      "($1) {",
      "  $0",
      "}"
    ],
    "description": [
       "Anonymous method"
    ]
  },
  "Anonymous single statement return": {
    "prefix": "r",
    "body": [
      "($1) => $0"
    ],
    "description": [
       "Anonymous single statement return"
    ]
  },
  "Async anonymous single statement method": {
    "prefix": "ar",
    "body": [
      "($1) async => $0"
    ],
    "description": [
       "Async anonymous single statement method"
    ]
  },
  "Instance or top level method": {
    "prefix": "fun",
    "body": [
      "${1:void} ${2:name}($3) {",
      "  $0",
      "}"
    ],
    "description": [
       "Instance or top level method"
    ]
  },
  "Async instance or top level method": {
    "prefix": "am",
    "body": [
      "Future<${1:void}> $2($3) async {",
      "  $0",
      "}"
    ],
    "description": [
       "Async instance or top level method"
    ]
  },
  "Assetes image with": {
    "prefix": "img",
    "body": [
      "Image(image: AssetImage('${1:assets/img.png}'),",
      "   width: 28,",
      "   height: 50,",
      "),"
    ],
    "description": [
       "AssetImage + width and height"
    ]
  },
  "Assetes image only": {
    "prefix": "imgonly",
    "body": [
      "Image(image: AssetImage('${1:assets/img.png}')),"
    ],
    "description": [
       "AssetImage only"
    ]
  },
  "Widget Card": {
    "prefix": "cardW",
    "body": [
      "Widget ${1:quoteTemplate}(${2:quote}){",
      "  return Card(",
      "    child : Text('${3:card widget}'),      ",
      "  );",
      "}"
    ],
    "description": [
       "Card widget"
    ]
  }
}
